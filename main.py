import os
import logging
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text, Command
from aiogram.utils import executor
from openpyxl import Workbook, load_workbook
from datetime import datetime
from sqlalchemy import func
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from handlers import markups as nav
from config import class_for_main1 as nav2


# ---- ADMIN ID ----

admin_tg_id = [1238343405, 5459503530]


if not os.path.exists('data'):
    os.makedirs('data', exist_ok=True)

if not os.path.exists('data/production.xlsx'):
    open('data/production.xlsx', 'w').close()

if not os.path.exists('data/consumption.xlsx'):
    open('data/consumption.xlsx', 'w').close()


dp = nav2.dp

logging.basicConfig(level=logging.INFO)


async def is_admin_user(message: types.Message):
    return message.from_user.id in admin_tg_id


@dp.message_handler(Command("start"), is_admin_user)
async def cmd_start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ù–∞—á–∞—Ç—å\", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.",
                        reply_markup=nav.mainMenu)


# --------- SEND BUG REPORT ---------

@dp.message_handler(Text(equals="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥ üêõ", ignore_case=True))
async def bug_report_command(message: types.Message):
    await message.reply("–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É.")
    await nav2.FormBugReport.text.set()


@dp.message_handler(state=nav2.FormBugReport.text, content_types=types.ContentType.ANY)
async def process_bug_report(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    chat_id = '-1002127891568'

    try:
        caption = f"–ë–∞–≥-—Ä–µ–ø–æ—Ä—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n{message.text}"
        await nav2.bot.send_message(chat_id, caption)

        if message.photo:
            photo = message.photo[-1].file_id
            await nav2.bot.send_photo(chat_id, photo, caption=caption)

        await message.reply("–ë–∞–≥-—Ä–µ–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ!")
    except Exception as e:
        logging.error(f"Error processing bug report: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.finish()


# --------- SUPPORT ---------

@dp.message_handler(Text(equals="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†", ignore_case=True))
async def support_report_command(message: types.Message):
    await message.reply(
        "ü§ñ <b>–®–≤–µ–π–Ω—ã–π –£—á–µ—Ç–Ω—ã–π –ë–æ—Ç - –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        "–ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞, "
        "–Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è! –ú—ã –≥–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
        "üì± <b>–¢–µ–ª–µ–≥—Ä–∞–º:</b> <b>@al1shka007</b>\n\n"
        "–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–ø–∏—Å—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ. "
        "–ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω—ã–º –¥–ª—è –í–∞—Å!\n\n"
        "<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –®–≤–µ–π–Ω–æ–≥–æ –£—á–µ—Ç–Ω–æ–≥–æ –ë–æ—Ç–∞!</b> üöÄ",
        parse_mode='HTML'
    )


# --------- REPORTS ---------

@dp.message_handler(Text(equals="–û—Ç—á–µ—Ç üìä", ignore_case=True))
async def process_name(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –º–∞—Å—Ç–µ—Ä–∞:")
    await nav2.FormReports.name.set()


@dp.message_handler(state=nav2.FormReports.name)
async def process_model_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:")
    await nav2.FormReports.model_name.set()


@dp.message_handler(state=nav2.FormReports.model_name)
async def process_model_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['model_name'] = message.text
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–¥–µ–ª–∏–π:")
    await nav2.FormReports.remaining.set()


@dp.message_handler(state=nav2.FormReports.remaining)
async def process_remaining(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['remaining'] = message.text
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–Ω—è–ª–∏ –∏–∑–¥–µ–ª–∏—è:")
    await nav2.FormReports.income.set()


@dp.message_handler(state=nav2.FormReports.income)
async def process_unit_price(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['income'] = message.text
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É:")
    await nav2.FormReports.expenses.set()


# --------- SEND REPORTS FILE ---------

@dp.message_handler(state=nav2.FormReports.expenses)
async def process_reports(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['expenses'] = int(message.text)
        data['result_reports'] = str(int(data['income']) * int(data['expenses']))  # –ò—Ç–æ–≥–æ = income * expenses

        new_report = nav2.Report(
            name=data['name'],
            model_name=data['model_name'],
            remaining=data['remaining'],
            income=data['income'],
            expenses=data['expenses'],
            result_reports=data['result_reports']
        )
        nav2.session.add(new_report)
        nav2.session.commit()

        try:
            file_path_reports = 'data/production.xlsx'
            if os.path.exists(file_path_reports):
                wb = load_workbook(file_path_reports)
            else:
                wb = load_workbook(file_path_reports)
                ws = wb.active
                ws.append(["–î–∞—Ç–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏", "–ú–∞—Å—Ç–µ—Ä –§–ò–û", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ü—Ä–∏–Ω—è–ª", "–¶–µ–Ω–∞", "–ò—Ç–æ–≥–æ"])

            ws = wb.active
            income = int(data['income'])
            remaining = int(data['remaining'])
            expenses = int(data['expenses'])
            result_reports = int(data['result_reports'])
            model_name = str(data['model_name'])
            name = str(data['name'])
            row = (datetime.now().strftime("%d.%m.%Y"), model_name, name, income, remaining, expenses, result_reports)
            ws.append(row)
            wb.save(file_path_reports)

            with open(file_path_reports, 'rb') as f:
                await nav2.bot.send_document(message.chat.id, f)
        except Exception as e:
            logging.error(f"Error sending document: {e}")
            print(f"Error sending document: {e}")

    await state.finish()


# --------- SEARCH IN REPORTS BY NAME ---------

@dp.message_handler(Text(equals="–ü–æ–∏—Å–∫ üîç", ignore_case=True))
async def search_options(message: types.Message):
    print("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ü–æ–∏—Å–∫'")
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ü–æ –∏–º–µ–Ω–∏ üïµÔ∏è‚Äç‚ôÇÔ∏è", callback_data="search_by_name"))
    keyboard.add(InlineKeyboardButton("–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–æ–¥–µ–ª–∏ üìÑ", callback_data="search_by_model"))

    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –ø–æ–∏—Å–∫–∞:", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data.startswith("search"))
async def search_option_callback(callback_query: CallbackQuery):
    option = callback_query.data[len("search_"):]
    if option == "by_name":
        logging.info("Received request to search by name")
        await nav2.bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        current_state = await nav2.dp.storage.get_state(chat=callback_query.message.chat.id,
                                                        user=callback_query.from_user.id)
        logging.info("Current state: %s", current_state)
        await nav2.FormSearch.name_db.set()
    elif option == "by_model":
        logging.info("Received request to search by model")
        await nav2.bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        current_state = await nav2.dp.storage.get_state(chat=callback_query.message.chat.id,
                                                        user=callback_query.from_user.id)
        logging.info("Current state: %s", current_state)
        await nav2.FormSearch.model_db.set()


@dp.message_handler(state=nav2.FormSearch.name_db)
async def process_search_by_name(message: types.Message, state: FSMContext):
    logging.info("Received message for name search: %s", message.text)
    async with state.proxy() as data:
        master_name = message.text.lower()

        try:
            results = nav2.session.query(nav2.Report).filter(func.lower(nav2.Report.name) == master_name).all()

            if not results:
                await message.reply(f"–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ '{master_name}'.")
                await state.finish()
                return

            file_path = "data/search_results_name.xlsx"

            try:
                workbook = load_workbook(file_path)
                sheet = workbook.active
            except FileNotFoundError:
                workbook = Workbook()
                sheet = workbook.active
                sheet.append(["–ú–∞—Å—Ç–µ—Ä", "–ú–æ–¥–µ–ª—å", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ü—Ä–∏–Ω—è—Ç–æ", "–ò—Ç–æ–≥"])

            for result in results:
                sheet.append([result.name, result.model_name, result.remaining, result.income, result.result_reports])

            workbook.save(file_path)
            workbook.close()

            with open(file_path, 'rb') as file:
                caption = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –º–∞—Å—Ç–µ—Ä—É '{master_name}'"
                await message.answer_document(file, caption=caption)

        except Exception as e:
            logging.error("Error querying the database: %s", str(e))
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

    await state.finish()


# --------- SEARCH IN REPORTS BY MODEL NAME ---------

@dp.message_handler(state=nav2.FormSearch.model_db)
async def process_search_by_model(message: types.Message, state: FSMContext):
    logging.info("Received message for model name search: %s", message.text)
    async with state.proxy() as data:
        model_name = message.text.lower()

        try:
            results = nav2.session.query(nav2.Report).filter(func.lower(nav2.Report.model_name) == model_name).all()

            if not results:
                await message.reply(f"–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ '{model_name}'.")
                await state.finish()
                return

            file_path = f"data/search_results_model.xlsx"

            try:
                workbook = load_workbook(file_path)
                sheet = workbook.active
            except FileNotFoundError:
                workbook = Workbook()
                sheet = workbook.active
                sheet.append(["–ú–∞—Å—Ç–µ—Ä", "–ú–æ–¥–µ–ª—å", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ü—Ä–∏–Ω—è—Ç–æ", "–ò—Ç–æ–≥"])

            for result in results:
                sheet.append([result.name, result.model_name, result.remaining, result.income, result.result_reports])

            workbook.save(file_path)
            workbook.close()

            with open(file_path, 'rb') as file:
                caption = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –º–æ–¥–µ–ª–∏ '{model_name}'"
                await message.answer_document(file, caption=caption)
        except Exception as e:
            logging.error("Error querying the database: %s", str(e))
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

    await state.finish()


# --------- EXPENSES ---------

@dp.message_handler(Text(equals="–†–∞—Å—Ö–æ–¥—ã üí∏", ignore_case=True))
async def cmd_calc(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –∑–∞ —Ç–∫–∞–Ω—å:")
    await nav2.FormExpenses.textile.set()


@dp.message_handler(state=nav2.FormExpenses.textile)
async def expenses_by_accessories(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['textile'] = message.text
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É:")
    await nav2.FormExpenses.accessories.set()


@dp.message_handler(state=nav2.FormExpenses.accessories)
async def expenses_by_sewing(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['accessories'] = message.text
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø–æ—à–∏–≤ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É:")
    await nav2.FormExpenses.sewing.set()


# --------- SEND EXPENSES FILE ---------

@dp.message_handler(state=nav2.FormExpenses.sewing)
async def process_expenses(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['sewing'] = message.text
        data['result_expenses'] = str(int(data['textile']) + int(data['accessories']) + int(data['sewing']))

        new_expenses = nav2.Expenses(
            textile=data['textile'],
            accessories=data['accessories'],
            sewing=data['sewing'],
            result_expenses=data['result_expenses']
        )
        nav2.session.add(new_expenses)
        nav2.session.commit()

        try:
            file_path_expenses = 'data/consumption.xlsx'
            if os.path.exists(file_path_expenses):
                wb = load_workbook(file_path_expenses)
            else:
                wb = load_workbook(file_path_expenses)
                ws = wb.active
                ws.append(['–î–∞—Ç–∞', '–ó–∞–∫—É–ø —Ç–∫–∞–Ω–∏', '–§—É—Ä–Ω–∏—Ç—É—Ä–∞', '–ü–æ—à–∏–≤ –∑–∞ –µ–¥.', '–ò—Ç–æ–≥–æ'])

            ws = wb.active
            textile = int(data['textile'])
            accessories = int(data['accessories'])
            sewing = int(data['sewing'])
            result_expenses = int(data['result_expenses'])
            row = (datetime.now().strftime("%d.%m.%Y"), textile, accessories, sewing, result_expenses)
            ws.append(row)
            wb.save(file_path_expenses)

            with open(file_path_expenses, 'rb') as f:
                await nav2.bot.send_document(message.chat.id, f)
        except Exception as e:
            logging.error(f"Error sending document: {e}")
            print(f"Error sending document: {e}")

    await state.finish()


if __name__ == '__main__':
    executor.start_polling(nav2.dp, skip_updates=True)
